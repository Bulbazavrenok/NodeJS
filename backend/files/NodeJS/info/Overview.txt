Платформа Node.js призначена для виконання високопродуктивних мережевих застосунків, 
написаних мовою програмування JavaScript. Платформа окрім роботи із серверними 
скриптами для веб-запитів, також використовується для створення клієнтських та 
серверних програм.

В платформі використовується розроблений компанією Google рушій V8.

Для забезпечення обробки великої кількості паралельних запитів у Node.js 
використовується асинхронна модель запуску коду, заснована на обробці подій в 
неблокуючому режимі та визначенні обробників зворотніх викликів (callback). Як 
способи мультиплексування з'єднань підтримується epoll, kqueue, /dev/poll і select. 
Для мультиплексування з'єднань використовується бібліотека libuv, для створення 
пулу нитей (thread pool) задіяна бібліотека libeio, для виконання DNS-запитів у 
неблокуючому режимі інтегрований c-ares. Всі системні виклики, що спричиняють 
блокування, виконуються всередині пулу потоків і потім, як і обробники сигналів, 
передають результат своєї роботи назад через неіменовані канали (pipe).

За своєю суттю Node.js схожий на фреймворки Perl AnyEvent, Ruby Event Machine і 
Python Twisted, але цикл обробки подій (event loop) у Node.js прихований від 
розробника і нагадує обробку подій у веб застосунку, що працює в браузері. При 
написанні програм для Node.js необхідно враховувати специфіку подієво-орієнтованого 
програмування, наприклад, замість виконання

 var result = db.query ("select .. ");
з очікуванням завершення роботи і наступною обробкою результатів, в Node.js 
використовує принцип асинхронного виконання, тобто код трансформується в

 db.query ("select .. ", function (result) { /* обробка результату */ });
При цьому управління миттєво перейде до коду який слідує після виклику функції 
db.query, а результат запиту буде оброблений як тільки будуть оброблені дані. 
Жодна функція в Node.js не повинна безпосередньо виконувати (блокуючі) операції 
вводу/виводу — для отримання даних з диска, від іншого процесу або з мережі потрібна 
установка callback-обробника.

Для розширення функціональності застосунків на базі Node.js підготовлена велика 
колекція модулів, в якій можна знайти реалізацію HTTP, SMTP, XMPP, DNS, FTP, IMAP, 
POP3 серверів і клієнтів, модулі для інтеграції з різними вебфреймворками, обробники 
WebSocket і AJAX, конектори до СКБД (MySQL, PostgreSQL, SQLite, MongoDB), шаблонізатори, 
CSS-рушії, реалізації криптоалгоритмів і систем авторизації (наприклад, OAuth), XML-парсери.